FROM ubuntu:latest
LABEL maintainer="@edelauna"

# Project represents container
ARG PROJECT
ENV PROJECT ${PROJECT}

### dev user network setup scrips
RUN apt-get update && apt-get upgrade -y --no-install-recommends && apt-get install -y --no-install-recommends \
    apt-transport-https \
    apt-utils \
    ca-certificates \
    curl \
    file \
    fontconfig \
    git \
    gnupg \
    less \
    inotify-tools \
    postgresql-client \
    ripgrep \
    rsync \
    ssh \
    sshfs \
    sudo \
    vim \
    zsh

### Some ZSH Customizations
RUN git clone https://github.com/zsh-users/zsh-autosuggestions.git /usr/local/share/zsh-autosuggestions &&\
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /usr/local/share/zsh-syntax-highlighting && \
    mkdir -p /usr/local/share/z && curl -fsSL https://raw.githubusercontent.com/rupa/z/master/z.sh \
    -o /usr/local/share/z/z.sh && chmod +x /usr/local/share/z/z.sh && \
    git clone https://github.com/zsh-users/zsh-history-substring-search.git /usr/local/share/zsh-history-substring-search

# Create dev user - and granting sudo access.
RUN useradd -ms /bin/zsh dev && \
    echo "dev ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Switch to new user
USER dev
WORKDIR /home/dev/

# Fonts
RUN mkdir -p ".fonts" ".local/bin"

RUN curl -L "https://github.com/abertsch/Menlo-for-Powerline/raw/master/Menlo%20for%20Powerline.ttf" \
    -o ".fonts/Menlo for Powerline.ttf" && \
    fc-cache -vf .fonts

# Move over configs
COPY .zshrc .zshrc

ENV ZPROFILE="/home/dev/.profile"

#####################
### INSTALL rbenv ###
#####################
RUN sudo apt-get update && sudo apt-get upgrade -y --no-install-recommends && sudo apt-get install -y --no-install-recommends \
    autoconf \
    bison \
    build-essential \
    libncurses5-dev \
    libreadline-dev \
    libffi-dev \
    libgdbm-dev \
    libpq-dev \
    libssl-dev \
    libyaml-dev \
    manpages-dev \
    zlib1g-dev  

RUN curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | /bin/zsh
RUN echo 'export PATH="/home/dev/.rbenv/bin:$PATH"' >> "${ZPROFILE}" && \
    echo 'eval "$(rbenv init -)"' >> "${ZPROFILE}"

### ruby-build
RUN git clone https://github.com/rbenv/ruby-build.git && \
    PREFIX=/usr/local sudo ./ruby-build/install.sh


###################
### Install NVM ###
###################

RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | PROFILE=${ZPROFILE} bash

####################
### Install Rust ###
####################

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

# Copy Code in into Container for setup purposes
# Gets overridden by compose when mounted
COPY projects/${PROJECT} /home/dev/${PROJECT}/

# Copy Scripts into Container
COPY --chmod=0755 bin/${PROJECT}/docker-entrypoint.sh .local/bin/docker-entrypoint.sh
COPY --chmod=0755 bin/${PROJECT}/docker-setup.sh .local/bin/docker-setup.sh
COPY --chmod=0755 bin/shared-entrypoint.sh .local/bin/shared-entrypoint.sh
COPY --chmod=0755 bin/simplesync .local/bin/simplesync

# Run project specialized setups
RUN sudo chown -R dev:dev /home/dev
RUN /bin/bash -c '.local/bin/docker-setup.sh'

ENTRYPOINT [ "/bin/bash", "/home/dev/.local/bin/docker-entrypoint.sh" ]

# Specifyin a login shell since containers will be attached to.
CMD [ "/bin/zsh", "-l" ]